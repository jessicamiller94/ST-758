# Keep track of the samples
keep.beta     <- matrix(0,10000,p)
keep.beta[1,] <- beta
acc   <- att <- rep(0,p)
curlp <- .99 # log posterior at current beta
for(i in 2:n.samples){
#Update beta using MH sampling:
for(j in 1:p){
att[j] <- att[j] + 1
# Draw candidate:
canbeta    <- beta
canbeta[j] <- rnorm(1,beta[j],can.sd[j])
canlp      <- .995
# Compute acceptance ratio:
R <- exp(canlp-curlp)
U <- runif(1)
if(U<R){
beta   <- canbeta
curlp  <- canlp
acc[j] <- acc[j]+1
}
}
keep.beta[i,]<-beta
keep.effect[i,] <- theta - X%*%beta
}
# Return the posterior samples of beta and
# the Metropolis acceptance rates
list(beta=keep.beta,acc.rate=acc/att)
}
fit_pois_nonspat <- Bayes.pois.nonspat(Y,cbind(1,Z,X[,c(8,10,17)]),
can.sd=c(0.02,0.02,0.008,0.005,0.005,0.008,0.04,0.04,0.06))
Bayes.pois.nonspat<-function(y,X,
n.samples=10000,
can.sd=0.1){
#Initial values:
p <- ncol(X)
beta <- rnorm(p)
# Keep track of the samples
keep.beta     <- matrix(0,10000,p)
keep.effect <- matrix(0,10000,n)
keep.beta[1,] <- beta
acc   <- att <- rep(0,p)
curlp <- .99 # log posterior at current beta
for(i in 2:n.samples){
#Update beta using MH sampling:
for(j in 1:p){
att[j] <- att[j] + 1
# Draw candidate:
canbeta    <- beta
canbeta[j] <- rnorm(1,beta[j],can.sd[j])
canlp      <- .995
# Compute acceptance ratio:
R <- exp(canlp-curlp)
U <- runif(1)
if(U<R){
beta   <- canbeta
curlp  <- canlp
acc[j] <- acc[j]+1
}
}
keep.beta[i,]<-beta
keep.effect[i,] <- theta - X%*%beta
}
# Return the posterior samples of beta and
# the Metropolis acceptance rates
list(beta=keep.beta,acc.rate=acc/att)
}
fit_pois_nonspat <- Bayes.pois.nonspat(Y,cbind(1,Z,X[,c(8,10,17)]),
can.sd=c(0.02,0.02,0.008,0.005,0.005,0.008,0.04,0.04,0.06))
random_effect <- apply(fit_pois_nonspat$effect[burn:10000,],2,mean)
fit_pois_nonspat$effect
Bayes.pois.nonspat<-function(y,X,
n.samples=10000,
can.sd=0.1){
#Initial values:
p <- ncol(X)
beta <- rnorm(p)
# Keep track of the samples
keep.beta     <- matrix(0,10000,p)
keep.effect <- matrix(0,10000,n)
keep.beta[1,] <- beta
acc   <- att <- rep(0,p)
curlp <- .99 # log posterior at current beta
for(i in 2:n.samples){
#Update beta using MH sampling:
for(j in 1:p){
att[j] <- att[j] + 1
# Draw candidate:
canbeta    <- beta
canbeta[j] <- rnorm(1,beta[j],can.sd[j])
canlp      <- .995
# Compute acceptance ratio:
R <- exp(canlp-curlp)
U <- runif(1)
if(U<R){
beta   <- canbeta
curlp  <- canlp
acc[j] <- acc[j]+1
}
}
keep.beta[i,]<-beta
keep.effect[i,] <- theta - X%*%beta
}
# Return the posterior samples of beta and
# the Metropolis acceptance rates
list(beta=keep.beta,acc.rate=acc/att, effect=keep.effect)
}
fit_pois_nonspat <- Bayes.pois.nonspat(Y,cbind(1,Z,X[,c(8,10,17)]),
can.sd=c(0.02,0.02,0.008,0.005,0.005,0.008,0.04,0.04,0.06))
fit_pois_nonspat$effect
random_effect <- apply(fit_pois_nonspat$effect[burn:10000,],2,mean)
which.max(abs(random_effect))
which.min(abs(random_effect))
which.min(random_effect)
names(Y)
par(mfrow=c(2,2))
plot(fit$samps[,1],type="l",ylab="Sigma2e")
plot(fit$samps[,2],type="l",ylab="Sigma2s")
plot(fit$samps[,3],type="l",ylab="mu")
plot(fit$samps[,4],type="l",ylab="rho")
par(mfrow=c(2,2), mar=c(1,1,1,1))
plot(fit$samps[,1],type="l",ylab="Sigma2e")
plot(fit$samps[,2],type="l",ylab="Sigma2s")
plot(fit$samps[,3],type="l",ylab="mu")
plot(fit$samps[,4],type="l",ylab="rho")
par(mfrow=c(2,2), mar=c(2,1,1,1))
plot(fit$samps[,1],type="l",ylab="Sigma2e")
plot(fit$samps[,2],type="l",ylab="Sigma2s")
plot(fit$samps[,3],type="l",ylab="mu")
plot(fit$samps[,4],type="l",ylab="rho")
par(mfrow=c(2,2), mar=c(2,1,1,2))
plot(fit$samps[,1],type="l",ylab="Sigma2e")
plot(fit$samps[,2],type="l",ylab="Sigma2s")
plot(fit$samps[,3],type="l",ylab="mu")
plot(fit$samps[,4],type="l",ylab="rho")
par(mfrow=c(2,2), mar=c(2,2,1,1))
plot(fit$samps[,1],type="l",ylab="Sigma2e")
plot(fit$samps[,2],type="l",ylab="Sigma2s")
plot(fit$samps[,3],type="l",ylab="mu")
plot(fit$samps[,4],type="l",ylab="rho")
par(mfrow=c(2,2), mar=c(2,3,1,1))
plot(fit$samps[,1],type="l",ylab="Sigma2e")
plot(fit$samps[,2],type="l",ylab="Sigma2s")
plot(fit$samps[,3],type="l",ylab="mu")
plot(fit$samps[,4],type="l",ylab="rho")
par(mfrow=c(2,2), mar=c(2,4.5,1,1))
plot(fit$samps[,1],type="l",ylab="Sigma2e")
plot(fit$samps[,2],type="l",ylab="Sigma2s")
plot(fit$samps[,3],type="l",ylab="mu")
plot(fit$samps[,4],type="l",ylab="rho")
fit_pois_nonspat <- Bayes.pois.nonspat(Y,cbind(1,Z,X[,c(8,10,17)]),
can.sd=c(0.02,0.02,0.008,0.005,0.005,0.008,0.04,0.04,0.06))
beta_pois_nonspat <- apply(fit_pois_nonspat$beta[burn:n.samples,],2,mean)
beta_pois_nonspat <- apply(fit_pois_nonspat$beta[burn:10000,],2,mean)
beta_pois_nonspat
mean(beta_pois_nonspat)
which.max(abs(random_effect))
which.min(abs(random_effect))
which.min(random_effect)
which.max(abs(random_effect))
which.min(abs(random_effect))
which.max(random_effect)
random_effect
setwd("F:/ST 758/jmmill13ST758")
loc1024 <- read.csv("locations1024.csv", header=T)
loc2025 <- read.csv("locations2025.csv", header=T)
loc4096 <- read.csv("locations4096.csv", header=T)
library(fields)
plot(loc1024[,1],loc1024[,2])
plot(loc2025[,1],loc2025[,2])
plot(loc4096[,1],loc4096[,2])
newlocs <- function(locs.x, locs.y, avg) {
newmat <- matrix(NA, nrow=length(locs.x)/avg, ncol=2)
newvec.x <- vector()
newvec.y <- vector()
for (i in 1:(length(locs.x)/avg)) {
newvec.x <- append(newvec.x, apply(locs.x[(avg*i-(avg-1)):(avg*i)],2,mean)
newvec.y <- append(newvec.y, apply(locs.y[(avg*i-(avg-1)):(avg*i)],2,mean)
}
newmat[,1] <- newvec.x
newmat[,2] <- newvec.y
return(newmat)
}
newlocs <- function(locs.x, locs.y, avg) {
newmat <- matrix(NA, nrow=length(locs.x)/avg, ncol=2)
newvec.x <- vector()
newvec.y <- vector()
for (i in 1:(length(locs.x)/avg)) {
newvec.x <- append(newvec.x, apply(locs.x[(avg*i-(avg-1)):(avg*i)],2,mean))
newvec.y <- append(newvec.y, apply(locs.y[(avg*i-(avg-1)):(avg*i)],2,mean))
}
newmat[,1] <- newvec.x
newmat[,2] <- newvec.y
return(newmat)
}
new1024 <- newlocs(loc1024[,1], loc1024[,2], 4)
newvec.x <- vector()
newvec.y <- vector()
for (i in 1:(1024/4)) {
newvec.x <- append(newvec.x, apply(loc1024[,1][(4*i-(4-1)):(4*i)],2,mean))
# newvec.y <- append(newvec.y, apply(locs.y[(avg*i-(avg-1)):(avg*i)],2,mean))
}
i
loc1024[,1][(4*i-(4-1)):(4*i)]
mean(loc1024[,1][(4*i-(4-1)):(4*i)])
apply(loc1024[,1][(4*i-(4-1)):(4*i)],2,mean)
apply(loc1024[,1][(4*i-(4-1)):(4*i)],1,mean)
for (i in 1:(1024/4)) {
newvec.x <- append(newvec.x, mean(loc1024[,1][(4*i-(4-1)):(4*i)])
# newvec.y <- append(newvec.y, apply(locs.y[(avg*i-(avg-1)):(avg*i)],2,mean))
}
for (i in 1:(1024/4)) {
newvec.x <- append(newvec.x, mean(loc1024[,1][(4*i-(4-1)):(4*i)]))
# newvec.y <- append(newvec.y, apply(locs.y[(avg*i-(avg-1)):(avg*i)],2,mean))
}
newlocs <- function(locs.x, locs.y, avg) {
newmat <- matrix(NA, nrow=length(locs.x)/avg, ncol=2)
newvec.x <- vector()
newvec.y <- vector()
for (i in 1:(length(locs.x)/avg)) {
newvec.x <- append(newvec.x, mean(locs.x[(avg*i-(avg-1)):(avg*i)]))
newvec.y <- append(newvec.y, mean(locs.y[(avg*i-(avg-1)):(avg*i)]))
}
newmat[,1] <- newvec.x
newmat[,2] <- newvec.y
return(newmat)
}
new1024 <- newlocs(loc1024[,1], loc1024[,2], 4)
new2025 <- newlocs(loc2025[,1], loc2025[,2], 5)
new4096 <- newlocs(loc4096[,1], loc4096[,2], 16)
View(new1024)
plot(loc1024[,1],loc1024[,2])
points(new1024[,1], new1024[,2], col="red")
plot(loc2025[,1],loc2025[,2])
points(new2025[,1], new2025[,2], col="red")
plot(loc4096[,1],loc4096[,2])
points(new4096[,1], new4096[,2], col="red")
s   <- expand.grid(new1024[,1],newlocs[,2])
x1 <- .2
x2 <- 9.8
s   <- expand.grid(x1, x2)
View(s)
plot(loc1024[1:256,1],loc1024[1:256,2])
plot(loc1024[257:(257+256),1],loc1024[(256+1):(256+1+256),2])
plot(loc1024[,1],loc1024[,2])
min(loc1024)
min(loc1024[,1])
min(loc1024[,2])
max(loc1024[,1])
max(loc1024[,2])
x1 <- seq(min(loc[,1]), max(loc[,1]), by=20)
x1 <- seq(min(loc1024[,1]), max(loc1024[,1]), by=20)
x1 <- seq(min(loc1024[,1]), max(loc1024[,1]), by=20)
seq(min(loc1024[,1]), max(loc1024[,1]), by=20)
min(loc1024[,1])
max(loc1024[,1])
x1 <- seq(min(loc1024[,1]), max(loc1024[,1]), by=.5)
x2 <- seq(min(loc1024[,2]), max(loc1024[,2]), by=.5)
s   <- expand.grid(x1, x2)
points(s, col="red")
newlocs <- function(locs.x, locs.y, sep) {
x1 <- seq(min(locs.x), max(locs.x), by=sep)
x2 <- seq(min(locs.y), max(locs.y), by=sep)
s   <- expand.grid(x1, x2)
}
plot(loc2025[,1],loc2025[,2])
new1024 <- newlocs(locs1024[,1], locs1024[,2], .5)
new1024 <- newlocs(loc1024[,1], loc1024[,2], .5)
new2025 <- newlocs(loc2025[,1], loc2025[,2], .5)
new4096 <- newlocs(loc4096[,1], loc4096[,2], .5)
plot(loc1024[,1],loc1024[,2])
points(new1024[,1], new1024[,2], col="red")
plot(loc2025[,1],loc2025[,2])
points(new2025[,1], new2025[,2], col="red")
plot(loc4096[,1],loc4096[,2])
points(new4096[,1], new4096[,2], col="red")
library(geoR)
dist1024 <- dist(new1024)
dist2025 <- dist(new2025)
dist4096 <- dist(new4096)
BesselK(dist)
besselK(dist)
besselK(dist, 1)
besselK(dist1024, 1)
dim(besselK(dist1024,1))
str(besselK(dist1024,1))
str(dist1024)
covmat <- function(number, dist) {
if (number == 1) {
cov <- dist%*%besselK(dist,1)
}
if (number == 2) {
cov <- exp(-dist)
}
}
maybe1024 <- covmat(1,dist1024)
covmat <- function(number, dist) {
if (number == 1) {
cov <- matern(dist,1)
}
if (number == 2) {
cov <- exp(-dist)
}
}
maybe1024 <- covmat(1,dist1024)
dist1024 <- rdist(new1024)
maybe1024 <- covmat(1,dist1024)
dist1024 <- dist(new1024)
length(dist1024)
covmat <- function(number, dist) {
if (number == 1) {
cov <- Matern(dist,1)
}
if (number == 2) {
cov <- exp(-dist)
}
}
maybe1024 <- covmat(1,dist1024)
cov <- Matern(dist1024,1)
dist1024 <- dist(new1024)
cov <- Matern(dist1024,1)
dist1024 <- rdist(new1024)
cov <- Matern(dist1024,1)
dist2025 <- rdist(new2025)
dist4096 <- rdist(new4096)
covmat <- function(number, dist) {
if (number == 1) {
cov <- Matern(dist1024,1)
}
if (number == 2) {
cov <- exp(-dist)
}
return(cov)
}
maybe1024 <- covmat(1,dist1024)
cov1024 <- covmat(1,dist1024)
cov1024.mat <- covmat(1,dist1024)
cov2025.mat <- covmat(1,dist2025)
cov4096.mat <- covmat(1,dist4096)
cov1024.exp <- covmat(2,dist1024)
cov2025.exp <- covmat(2,dist2025)
cov4096.exp <- covmat(2,dist4096)
View(cov2025.mat)
det(cov1024.mat)
loglik <- function(y, cov) {
likeli <- t(y)%*%solve(cov)%*%y
return(likeli)
}
library(mvtnorm)
y1 <- rmvnorm(0,cov1024.mat)
y1 <- rmvnorm(n=dim(cov1024)[1],cov1024.mat)
dim(cov1024.mat)
dim(cov1024.mat)[1]
y1 <- rmvnorm(n=400,cov1024.mat)
y1 <- mvnorm(n=400,cov1024.mat)
nrow(cov1024.mat)
y1 <- mvnorm(n=400,cov1024.mat)
y1 <- rmvnorm(n=400,cov1024.mat)
y1 <- rmvnorm(n=400,sigma=cov1024.mat)
View(`y1`)
maybe1024.mat <- loglik(y1[,1], cov1024.mat)
View(maybe1024.mat)
maybe1024.mat <- loglik(y1[,2], cov1024.mat)
maybe1024.mat <- loglik(y1[,3], cov1024.mat)
system.time(maybe1024.mat <- loglik(y1[,3], cov1024.mat))
system.time(maybe1024.mat <- loglik(y1[,2], cov1024.mat))
system.time(maybe1024.mat <- loglik(y1[,1], cov1024.mat))
for (i in 1:400) {
timing <- append(timing, system.time(loglik1024.mat <- loglik(y1[,i], cov1024.mat))[3])
}
timing <- vector()
for (i in 1:400) {
timing <- append(timing, system.time(loglik1024.mat <- loglik(y1[,i], cov1024.mat))[3])
}
plot(timing)
mean(timing)
y2 <- rmvnorm(n=400,sigma=cov1024.exp)
timing1 <- vector()
loglik <- function(cov) {
y <- rmvnorm(n=nrow(cov), sigma=cov)
timing1 <- vector()
timing2 <- vector()
for (i in 1:nrow(cov)){
timing1 <- append(timing1, system.time(t(y)%*%solve(cov)%*%y)[3])
timing2 <- append(timing2, system.time(t(y)%*%chol2inv(chol(cov))%*%y)[3])
}
return(list(timing1,timing2))
}
ll1024 <- loglik(cov1024.mat)
loglik <- function(cov) {
y <- rmvnorm(n=nrow(cov), sigma=cov)
timing1 <- vector()
timing2 <- vector()
for (i in 1:nrow(cov)){
timing1 <- append(timing1, system.time(t(y[,i])%*%solve(cov)%*%y[,i])[3])
timing2 <- append(timing2, system.time(t(y[,i])%*%chol2inv(chol(cov))%*%y[,i])[3])
}
return(list(timing1,timing2))
}
ll1024 <- loglik(cov1024.mat)
ll1024[[1]]
as.numeric(ll1024[[1]])
as.numeric(ll1024[[2]])
cma <- chol(ma  <- cbind(1, 1:3, c(1,3,7)))
ma %*% chol2inv(cma)
ll1024 <- loglik(cov1024.exp)
as.numeric(ll1024[[1]])
as.numeric(ll1024[[2]])
loglik <- function(cov) {
y <- rmvnorm(n=nrow(cov), sigma=cov)
timing1 <- vector()
timing2 <- vector()
for (i in 1:nrow(cov)){
timing1 <- append(timing1, system.time(t(y[,i])%*%solve(cov)%*%y[,i])[3])
timing2 <- append(timing2, system.time(t(y[,i])%*%chol2inv(chol(cov))%*%y[,i])[3])
}
return(list(as.numeric(timing1),as.numeric(timing2)))
}
ll1024.mat <- loglik(cov1024.mat)
ll1024.exp <- loglik(cov1024.exp)
ll2025.mat <- loglik(cov2025.mat)
ll2025.exp <- loglik(cov2025.exp)
ll4096.mat <- loglik(cov4096.mat)
ll4096.exp <- loglik(cov4096.exp)
plot(ll1024.mat[[1]])
point(ll1024.exp[[1]], col="red")
points(ll1024.exp[[1]], col="red")
plot(ll1024.mat[[2]])
points(ll1024.exp[[2]], col="red")
plot(ll2025.mat[[1]])
points(ll2025.exp[[1]], col="red")
plot(ll2025.mat[[2]])
points(ll2025.exp[[2]], col="red")
plot(ll4096.mat[[1]])
points(ll4096.exp[[1]], col="red")
plot(ll4096.mat[[2]])
points(ll4096.exp[[2]], col="red")
mean(ll1024.mat[[1]])
mean(ll1024.exp[[1]])
mean(ll1024.mat[[2]])
mean(ll1024.exp[[2]])
mean(ll2025.mat[[1]])
mean(ll2025.exp[[1]])
mean(ll2025.mat[[2]])
mean(ll2025.exp[[2]])
mean(ll4096.mat[[1]])
mean(ll4096.exp[[1]])
mean(ll4096.mat[[2]])
mean(ll4096.exp[[2]])
new2025.2 <- newlocs(loc2025[,1], loc2025[,2], .25)
new4096.2 <- newlocs(loc4096[,1], loc4096[,2], .1)
plot(loc2025[,1],loc2025[,2])
points(new2025.2[,1], new2025.2[,2], col="red")
plot(loc4096[,1],loc4096[,2])
points(new4096.2[,1], new4096.2[,2], col="red")
new2025.2 <- newlocs(loc2025[,1], loc2025[,2], .375)
new4096.2 <- newlocs(loc4096[,1], loc4096[,2], .25)
points(new2025.2[,1], new2025.2[,2], col="red")
plot(loc2025[,1],loc2025[,2])
points(new2025.2[,1], new2025.2[,2], col="red")
plot(loc4096[,1],loc4096[,2])
points(new4096.2[,1], new4096.2[,2], col="red")
dist2025.2 <- rdist(new2025.2)
dist4096.2 <- rdist(new4096.2)
cov2025.mat.2 <- covmat(1,dist2025.2)
cov4096.mat.2 <- covmat(1,dist4096.2)
cov2025.exp.2 <- covmat(2,dist2025.2)
cov4096.exp.2 <- covmat(2,dist4096.2)
ll2025.mat.2 <- loglik(cov2025.mat.2)
ll2025.exp.2 <- loglik(cov2025.exp.2)
ll4096.mat.2 <- loglik(cov4096.mat.2)
ll4096.exp.2 <- loglik(cov4096.exp.2)
mean(ll2025.mat.2[[1]])
mean(ll2025.exp.2[[1]])
mean(ll2025.mat.2[[2]])
mean(ll2025.exp.2[[2]])
mean(ll4096.mat.2[[1]])
mean(ll4096.exp.2[[1]])
mean(ll4096.mat.2[[2]])
ll4096.exp.2 <- loglik2(cov4096.exp.2)
loglik2 <- function(cov) {
y <- rmvnorm(n=nrow(cov), sigma=cov)
timing1 <- vector()
timing2 <- vector()
for (i in 1:400){
timing1 <- append(timing1, system.time(t(y[,i])%*%solve(cov)%*%y[,i])[3])
timing2 <- append(timing2, system.time(t(y[,i])%*%chol2inv(chol(cov))%*%y[,i])[3])
}
return(list(as.numeric(timing1),as.numeric(timing2)))
}
ll4096.exp.2 <- loglik2(cov4096.exp.2)
loglik2 <- function(cov) {
y <- rmvnorm(n=nrow(cov), sigma=cov)
timing1 <- vector()
timing2 <- vector()
for (i in 1:20){
timing1 <- append(timing1, system.time(t(y[,i])%*%solve(cov)%*%y[,i])[3])
timing2 <- append(timing2, system.time(t(y[,i])%*%chol2inv(chol(cov))%*%y[,i])[3])
}
return(list(as.numeric(timing1),as.numeric(timing2)))
}
ll4096.exp.2 <- loglik2(cov4096.exp.2)
mean(ll4096.exp.2[[1]])
mean(ll4096.exp.2[[2]])
mean(ll2025.mat.2[[1]])
mean(ll2025.exp.2[[1]])
mean(ll2025.mat.2[[2]])
mean(ll2025.exp.2[[2]])
mean(ll4096.mat.2[[1]])
mean(ll4096.exp.2[[1]])
mean(ll4096.mat.2[[2]])
mean(ll4096.exp.2[[2]])
